/*
대전 멤버십은 이번에 리모델링 계획을 하고 있다. 효율적인 세미나 공간을 위하여 지정된 공간 내에서 효율적인 세미나실 개수를 고민하고 있다. 
하지만, 지정 된 면적에서 세미나실을 나누는 것에는 고려할 사항이 많아 시간이 많이 든다. 
한 공간을 두 개의 세미나 실로 나누는 방법만 해도 너무나 다양하기 때문이다. 
그래서 한 장소를 두 개의 세미나실로 나누는 방법을 정하는 데에는 나누기 전의 넓이에 비례하는 시간이 든다.

예를 들어, 1000평의 공간을 300+700으로 나누든 500+500으로 나누든 1000이란 시간이 든다. 전체 공간은 하나의 세미나실로 시작한다. 
한번에 하나의 세미나실을 2개로 나누는 작업을 ‘세미나실 -1’번 함으로써 세미나실을 분할하는 작업은 완료된다.
세미나 실을 나누는 순서에 따라 전체 파티션을 결정하는 작업에 소요되는 시간이 달라진다. 
예를 들어, 800평을 100+200+500의 세 세미나실로 나눈다고 하자. 
먼저 전체를 100+700으로 나눈 후, 700 평을 200+500으로 나누면 총 800+700=1500 만큼의 시간이 든다. 
그러나 300+500으로 먼저 나눈 후, 300평을 100+200으로 나누면 800+300=1100 만큼의 시간이 든다.

대전 담당 운영자가 가장 빠른 시간에 전체의 세미나실 분할을 끝낼 수 있는 순서를 정하려 한다. 
해당 면적이 주어졌을 때, 전체 세미나실을 계획한 대로 나누기 위해 가장 효율적으로 소요되는 시간을 구하는 프로그램을 작성하라.

[추가예시]
4
10 10 10 10
위와 같이 케이스가 주어지게 되면, 총 면적은 40이되어 최초 비용 40, 이후 20,20으로 나눠서 각각 10, 10으로 나눠지는데 비용이 20, 20이 추가되어 총 40+20+20 = 80 총 80의 비용이 소요되게 된다.

[입력]
첫째 줄에 케이스의 개수 T가 주어지고, 이후 차례로 T개 테스트 케이스가 주어진다.
각 케이스의 첫 줄에는 세미나실의 총 수 N이 주어진다.(1≤N≤10000)
다음 줄에는 각 부서에서 사용할 공간의 크기(S)가 공백을 사이에 두고 N개의 정수로 주어진다. (10≤S≤5000)

[출력]
각 행에 최소 총 소요시간을 출력한다.
( 중요! 테스트 케이스 개수마다 #testcase번호를 출력 후 정답 출력 )

[STL사용 불가]

[입출력 예]

입력
2
3
500 100 200
4
30 40 10 20

출력
#testcase1
1100
#testcase2
190

*/

/*

VCPP, GPP에서 사용

*/

#include <iostream>
using namespace std;


void sort(int *room, int num_room) {
	for (int i = 0; i < num_room; i++) {
		for (int j = 0; j < num_room - 1; j++) {
			if (room[j] > room[j + 1]) {
				int temp = room[j];
				room[j] = room[j + 1];
				room[j + 1] = temp;\
			}
		}
	}
}


/*
sum : bottom -> top
*/
void process(int *room, int num_room, int &total) {
	int cache = 0;

	for (int i = 0; i < num_room-1; i++) {
		cache = room[i] + room[i + 1];
		room[i + 1] = cache;
		total += cache;
	}
}


int main()
{

	int nCount;		/* 문제의 테스트 케이스 */

	cin >> nCount;	/* 테스트 케이스 입력 */

	for (int itr = 0; itr<nCount; itr++)
	{

		cout << "#testcase" << (itr + 1) << endl;

		/*
		알고리즘이 들어가는 부분
		*/

		int num_room;
		int total = 0;
		int room[10000] = { 0, };

		cin >> num_room;
		for (int i = 0; i < num_room; i++)
			cin >> room[i];

		sort(room, num_room);
		process(room, num_room, total);
	}

	return 0;	/* 반드시 return 0으로 해주셔야합니다. */

}
